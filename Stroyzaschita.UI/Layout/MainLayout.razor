@using Stroyzaschita.Shared.DTOs.Chat
@using Stroyzaschita.Shared.DTOs.User
@using Stroyzaschita.UI.Contexts
@using Stroyzaschita.UI.Interfaces
@using Stroyzaschita.UI.Services
@using System.Net.Http.Headers

@inject NavigationManager NavigationManager
@inject TokenStorage TokenStorage
@inject AuthContext AuthContext
@inject IAuthService AuthService
@inject HttpClient HttpClient

@inherits LayoutComponentBase

<MudLayout>
    <a href="/">
        <img src="images/logo_stroyzaschita.png" alt="Логотип"
        style="position: absolute; top: 20px; left: 20px; height: 80px; width: auto; z-index: 1000;" />
    </a>

    @if (AuthContext.IsAuthenticated) {
        <MudButton Color="Color.Primary"
        Variant="Variant.Filled"
        Style="position: absolute; top: 20px; right: 20px; z-index: 1000;"
        class="rounded-lg"
        OnClick="Logout">
            Выйти
        </MudButton>
    }
    else {
        <MudButton Color="Color.Primary"
        Variant="Variant.Filled"
        Style="position: absolute; top: 20px; right: 20px; z-index: 1000;"
        class="rounded-lg"
        Href="/login">
            Войти
        </MudButton>
    }

    <MudAppBar Style="position: relative" Elevation="0" Color="Color.Default" Class="py-6">
        <MudTabs Rounded="true" Border="false" Dense="true" Centered="true" Class="mt-4" Style="margin: 0 auto;">
            <MudTabPanel Text="Главная" @onclick='() => NavigateTo("/")' />
            <MudTabPanel Text="О нас" @onclick='() => NavigateTo("/about")' />
            <MudTabPanel Text="Контакты" @onclick='() => NavigateTo("/contacts")' />
            <MudTabPanel Text="Создать заявку" @onclick='() => NavigateTo("/make-request")' />
            <MudTabPanel Text="Чат" @onclick='() => NavigateTo("/chat")' />
            @if (AuthContext.Role == "Admin") {
                <MudTabPanel Text="Админка" @onclick='() => NavigateTo("/admin")' />
            }
        </MudTabs>
    </MudAppBar>

    <MudDivider Class="my-0" Style="height: 3px; background-color: black; width: 100vw;" />

    <MudContainer MaxWidth="MaxWidth.False" Style="padding: 20px; height: calc(100vh - 120px); box-sizing: border-box;">
        <MudPaper Class="pa-6" Elevation="1" Style="width: 100%; height: 100%; border: 2px solid black; border-radius: 16px;">
            @Body
        </MudPaper>
    </MudContainer>
</MudLayout>

@code {
    void NavigateTo(string url) {
        Console.WriteLine($"--- Переход к URL: {url}");
        Console.WriteLine($"IsAuthenticated: {AuthContext.IsAuthenticated}");
        Console.WriteLine($"URL получен: {url}");
        var protectedRoutes = new[] { "/make-request", "/chat" };

        url = url.Trim().ToLower();
        Console.WriteLine($"URL получен: {url}");

        bool isProtected = protectedRoutes.Contains(url);
        bool isAuthorized = AuthContext.IsAuthenticated;
        Console.WriteLine($"isProtected: {isProtected}, isAuthenticated: {AuthContext.IsAuthenticated}");

        NavigationManager.NavigateTo(isProtected && !isAuthorized ? "/unauthorized" : url);
    }

    protected override async Task OnInitializedAsync() {      
        Console.WriteLine("OnInit entered");

        var token = await TokenStorage.GetTokenAsync();
        if (!string.IsNullOrWhiteSpace(token)) {
            AuthContext.IsAuthenticated = true;
            AuthContext.Token = token;
            AuthContext.InitializeFromToken(token);

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            try {
                var user = await HttpClient.GetFromJsonAsync<UserDto>("api/users/me");
                AuthContext.CurrentUser = user;
                AuthContext.InitializeFromToken(token);
            }
            catch (Exception ex) {
                Console.WriteLine("Ошибка при загрузке текущего пользователя: " + ex.Message);
                NavigationManager.NavigateTo("/unauthorized");
                return;
            }
        }
    }

    private async Task Logout() {
        await TokenStorage.RemoveTokenAsync();
        AuthContext.IsAuthenticated = false;
        AuthContext.CurrentUser = null;
        AuthContext.Token = null;
        HttpClient.DefaultRequestHeaders.Authorization = null;
        NavigationManager.NavigateTo("/");
    }
}
